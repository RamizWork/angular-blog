{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport class AuthGuard {\n  constructor(authService, router, toaster) {\n    this.authService = authService;\n    this.router = router;\n    this.toaster = toaster;\n  }\n  canActivate(route, state) {\n    const isAuthenticated = this.authService.getIsAuthenticated().getValue();\n    if (isAuthenticated) {\n      return true;\n    } else {\n      this.authService.logout();\n      this.toaster.error('You need to log in');\n      this.router.navigate(['/admin', 'login'], {\n        queryParams: {\n          loginAgain: true\n        }\n      });\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","toaster","canActivate","route","state","isAuthenticated","getIsAuthenticated","getValue","logout","error","navigate","queryParams","loginAgain","_","i0","ɵɵinject","i1","AuthService","i2","Router","i3","ToastrService","_2","factory","ɵfac"],"sources":["C:\\Progect for learning\\angular-blog\\src\\app\\admin\\shared\\auth.guard.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from \"@angular/router\";\r\nimport {Observable} from \"rxjs\";\r\nimport {ToastrService} from \"ngx-toastr\";\r\n\r\nimport {AuthService} from \"./services/auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthGuard  {\r\n\r\n  constructor(private authService: AuthService, private router: Router, private toaster: ToastrService) {\r\n  }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot, state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    const isAuthenticated = this.authService.getIsAuthenticated().getValue();\r\n\r\n    if (isAuthenticated) {\r\n      return true;\r\n    } else {\r\n      this.authService.logout();\r\n      this.toaster.error('You need to log in');\r\n      this.router.navigate(['/admin', 'login'], {\r\n        queryParams: {\r\n          loginAgain: true\r\n        }\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,OAAsB;IAAhF,KAAAF,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,OAAO,GAAPA,OAAO;EACrF;EAEAC,WAAWA,CACTC,KAA6B,EAAEC,KAA0B;IAEzD,MAAMC,eAAe,GAAG,IAAI,CAACN,WAAW,CAACO,kBAAkB,EAAE,CAACC,QAAQ,EAAE;IAExE,IAAIF,eAAe,EAAE;MACnB,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAI,CAACN,WAAW,CAACS,MAAM,EAAE;MACzB,IAAI,CAACP,OAAO,CAACQ,KAAK,CAAC,oBAAoB,CAAC;MACxC,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE;QACxCC,WAAW,EAAE;UACXC,UAAU,EAAE;;OAEf,CAAC;MACF,OAAO,KAAK;IACd;EACF;EAAC,QAAAC,CAAA,G;qBAtBUhB,SAAS,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATzB,SAAS;IAAA0B,OAAA,EAAT1B,SAAS,CAAA2B;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}