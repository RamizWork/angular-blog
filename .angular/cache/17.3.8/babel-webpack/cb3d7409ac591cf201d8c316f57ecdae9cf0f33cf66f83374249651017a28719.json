{"ast":null,"code":"import { __awaiter, __generator, __assign } from 'tslib';\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, validateIndexedDBOpenable, isIndexedDBAvailable, isBrowserExtension, areCookiesEnabled } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Key to attach FID to in gtag params.\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/**\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n *\r\n * @public\r\n */\nvar EventName;\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /**\r\n   * @deprecated\r\n   * This event name is deprecated and is unsupported in updated\r\n   * Enhanced Ecommerce reports.\r\n   */\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\nfunction logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId, params;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n          return [2 /*return*/];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          params = __assign(__assign({}, eventParams), {\n            'send_to': measurementId\n          });\n          gtagFunction(GtagCommand.EVENT, eventName, params);\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\nfunction setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.SET, {\n            'screen_name': screenName\n          });\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'screen_name': screenName\n          });\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\nfunction setUserId(gtagFunction, initializationPromise, id, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.SET, {\n            'user_id': id\n          });\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_id': id\n          });\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\nfunction setUserProperties(gtagFunction, initializationPromise, properties, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var flatProperties, _i, _a, key, measurementId;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          flatProperties = {};\n          for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n            key = _a[_i];\n            // use dot notation for merge behavior in gtag.js\n            flatProperties[\"user_properties.\" + key] = properties[key];\n          }\n          gtagFunction(GtagCommand.SET, flatProperties);\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _b.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_properties': properties\n          });\n          _b.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\nfunction setAnalyticsCollectionEnabled(initializationPromise, enabled) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, initializationPromise];\n        case 1:\n          measurementId = _a.sent();\n          window[\"ga-disable-\" + measurementId] = !enabled;\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n  var script = document.createElement('script');\n  script.src = GTAG_URL + \"?l=\" + dataLayerName + \"&id=\" + measurementId;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n  return __awaiter(this, void 0, void 0, function () {\n    var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          correspondingAppId = measurementIdToAppId[measurementId];\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 7,, 8]);\n          if (!correspondingAppId) return [3 /*break*/, 3];\n          return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];\n        case 2:\n          _a.sent();\n          return [3 /*break*/, 6];\n        case 3:\n          return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\n        case 4:\n          dynamicConfigResults = _a.sent();\n          foundConfig = dynamicConfigResults.find(function (config) {\n            return config.measurementId === measurementId;\n          });\n          if (!foundConfig) return [3 /*break*/, 6];\n          return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];\n        case 5:\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          return [3 /*break*/, 8];\n        case 7:\n          e_1 = _a.sent();\n          logger.error(e_1);\n          return [3 /*break*/, 8];\n        case 8:\n          gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n  return __awaiter(this, void 0, void 0, function () {\n    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 4,, 5]);\n          initializationPromisesToWaitFor = [];\n          if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];\n          gaSendToList = gtagParams['send_to'];\n          // Make it an array if is isn't, so it can be dealt with the same way.\n          if (!Array.isArray(gaSendToList)) {\n            gaSendToList = [gaSendToList];\n          }\n          return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\n        case 1:\n          dynamicConfigResults = _a.sent();\n          _loop_1 = function (sendToId) {\n            // Any fetched dynamic measurement ID that matches this 'send_to' ID\n            var foundConfig = dynamicConfigResults.find(function (config) {\n              return config.measurementId === sendToId;\n            });\n            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n            if (initializationPromise) {\n              initializationPromisesToWaitFor.push(initializationPromise);\n            } else {\n              // Found an item in 'send_to' that is not associated\n              // directly with an FID, possibly a group.  Empty this array,\n              // exit the loop early, and let it get populated below.\n              initializationPromisesToWaitFor = [];\n              return \"break\";\n            }\n          };\n          for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n            sendToId = gaSendToList_1[_i];\n            state_1 = _loop_1(sendToId);\n            if (state_1 === \"break\") break;\n          }\n          _a.label = 2;\n        case 2:\n          // This will be unpopulated if there was no 'send_to' field , or\n          // if not all entries in the 'send_to' field could be mapped to\n          // a FID. In these cases, wait on all pending initialization promises.\n          if (initializationPromisesToWaitFor.length === 0) {\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n          }\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];\n        case 3:\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          _a.sent();\n          // Workaround for http://b/141370449 - third argument cannot be undefined.\n          gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n          return [3 /*break*/, 5];\n        case 4:\n          e_2 = _a.sent();\n          logger.error(e_2);\n          return [3 /*break*/, 5];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(command, idOrNameOrParams, gtagParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 6,, 7]);\n            if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];\n            // If EVENT, second arg must be measurementId.\n            return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\n          case 1:\n            // If EVENT, second arg must be measurementId.\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 2:\n            if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];\n            // If CONFIG, second arg must be measurementId.\n            return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\n          case 3:\n            // If CONFIG, second arg must be measurementId.\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            // If SET, second arg must be params.\n            gtagCore(GtagCommand.SET, idOrNameOrParams);\n            _a.label = 5;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            e_3 = _a.sent();\n            logger.error(e_3);\n            return [3 /*break*/, 7];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function () {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERRORS = (_a = {}, _a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.', _a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a[\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}', _a[\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a[\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a[\"fetch-throttle\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a[\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}', _a[\"no-api-key\" /* NO_API_KEY */] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.', _a[\"no-app-id\" /* NO_APP_ID */] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\nvar LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\nvar BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\nvar RetryData = /** @class */function () {\n  function RetryData(throttleMetadata, intervalMillis) {\n    if (throttleMetadata === void 0) {\n      throttleMetadata = {};\n    }\n    if (intervalMillis === void 0) {\n      intervalMillis = BASE_INTERVAL_MILLIS;\n    }\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n  RetryData.prototype.getThrottleMetadata = function (appId) {\n    return this.throttleMetadata[appId];\n  };\n  RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  };\n  RetryData.prototype.deleteThrottleMetadata = function (appId) {\n    delete this.throttleMetadata[appId];\n  };\n  return RetryData;\n}();\nvar defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfig(appFields) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function () {\n    var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, apiKey = appFields.apiKey;\n          request = {\n            method: 'GET',\n            headers: getHeaders(apiKey)\n          };\n          appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n          return [4 /*yield*/, fetch(appUrl, request)];\n        case 1:\n          response = _b.sent();\n          if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];\n          errorMessage = '';\n          _b.label = 2;\n        case 2:\n          _b.trys.push([2, 4,, 5]);\n          return [4 /*yield*/, response.json()];\n        case 3:\n          jsonResponse = _b.sent();\n          if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n            errorMessage = jsonResponse.error.message;\n          }\n          return [3 /*break*/, 5];\n        case 4:\n          _b.sent();\n          return [3 /*break*/, 5];\n        case 5:\n          throw ERROR_FACTORY.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\n            httpStatus: response.status,\n            responseMessage: errorMessage\n          });\n        case 6:\n          return [2 /*return*/, response.json()];\n      }\n    });\n  });\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfigWithRetry(app,\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\nretryData, timeoutMillis) {\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, appId, apiKey, measurementId, throttleMetadata, signal;\n    var _this = this;\n    return __generator(this, function (_b) {\n      _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\n      if (!appId) {\n        throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\n      }\n      if (!apiKey) {\n        if (measurementId) {\n          return [2 /*return*/, {\n            measurementId: measurementId,\n            appId: appId\n          }];\n        }\n        throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\n      }\n      throttleMetadata = retryData.getThrottleMetadata(appId) || {\n        backoffCount: 0,\n        throttleEndTimeMillis: Date.now()\n      };\n      signal = new AnalyticsAbortSignal();\n      setTimeout(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n            signal.abort();\n            return [2 /*return*/];\n          });\n        });\n      }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n      return [2 /*return*/, attemptFetchDynamicConfigWithRetry({\n        appId: appId,\n        apiKey: apiKey,\n        measurementId: measurementId\n      }, throttleMetadata, signal, retryData)];\n    });\n  });\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\n) {\n  var throttleEndTimeMillis = _a.throttleEndTimeMillis,\n    backoffCount = _a.backoffCount;\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, measurementId = appFields.measurementId;\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];\n        case 2:\n          _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          e_1 = _b.sent();\n          if (measurementId) {\n            logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\n            return [2 /*return*/, {\n              appId: appId,\n              measurementId: measurementId\n            }];\n          }\n          throw e_1;\n        case 4:\n          _b.trys.push([4, 6,, 7]);\n          return [4 /*yield*/, fetchDynamicConfig(appFields)];\n        case 5:\n          response = _b.sent();\n          // Note the SDK only clears throttle state if response is success or non-retriable.\n          retryData.deleteThrottleMetadata(appId);\n          return [2 /*return*/, response];\n        case 6:\n          e_2 = _b.sent();\n          if (!isRetriableError(e_2)) {\n            retryData.deleteThrottleMetadata(appId);\n            if (measurementId) {\n              logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\n              return [2 /*return*/, {\n                appId: appId,\n                measurementId: measurementId\n              }];\n            } else {\n              throw e_2;\n            }\n          }\n          backoffMillis = Number(e_2.customData.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n          throttleMetadata = {\n            throttleEndTimeMillis: Date.now() + backoffMillis,\n            backoffCount: backoffCount + 1\n          };\n          // Persists state.\n          retryData.setThrottleMetadata(appId, throttleMetadata);\n          logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\n          return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(function () {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nvar AnalyticsAbortSignal = /** @class */function () {\n  function AnalyticsAbortSignal() {\n    this.listeners = [];\n  }\n  AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\n    this.listeners.push(listener);\n  };\n  AnalyticsAbortSignal.prototype.abort = function () {\n    this.listeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n  return AnalyticsAbortSignal;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateIndexedDB() {\n  return __awaiter(this, void 0, void 0, function () {\n    var e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!!isIndexedDBAvailable()) return [3 /*break*/, 1];\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: 'IndexedDB is not available in this environment.'\n          }).message);\n          return [2 /*return*/, false];\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, validateIndexedDBOpenable()];\n        case 2:\n          _a.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          e_1 = _a.sent();\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: e_1\n          }).message);\n          return [2 /*return*/, false];\n        case 4:\n          return [2 /*return*/, true];\n      }\n    });\n  });\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {\n  return __awaiter(this, void 0, void 0, function () {\n    var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n          // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n          dynamicConfigPromise.then(function (config) {\n            measurementIdToAppId[config.measurementId] = config.appId;\n            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n              logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" + (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") + \" To ensure analytics events are always sent to the correct Analytics property,\" + \" update the\" + \" measurement ID field in the local config or remove it from the local config.\");\n            }\n          }).catch(function (e) {\n            return logger.error(e);\n          });\n          // Add to list to track state of all dynamic config promises.\n          dynamicConfigPromisesList.push(dynamicConfigPromise);\n          fidPromise = validateIndexedDB().then(function (envIsValid) {\n            if (envIsValid) {\n              return installations.getId();\n            } else {\n              return undefined;\n            }\n          });\n          return [4 /*yield*/, Promise.all([dynamicConfigPromise, fidPromise])];\n        case 1:\n          _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];\n          // Detect if user has already put the gtag <script> tag on this page.\n          if (!findGtagScriptOnPage()) {\n            insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n          }\n          // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          gtagCore('js', new Date());\n          configProperties = (_b = {},\n          // guard against developers accidentally setting properties with prefix `firebase_`\n          _b[ORIGIN_KEY] = 'firebase', _b.update = true, _b);\n          if (fid != null) {\n            configProperties[GA_FID_KEY] = fid;\n          }\n          // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n          // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n          // `configProperties`.\n          gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n          return [2 /*return*/, dynamicConfig.measurementId];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\nvar initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\nvar dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\nvar measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n  if (newInitializationPromisesMap === void 0) {\n    newInitializationPromisesMap = {};\n  }\n  if (newDynamicPromises === void 0) {\n    newDynamicPromises = [];\n  }\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\nfunction getGlobalVars() {\n  return {\n    initializationPromisesMap: initializationPromisesMap,\n    dynamicConfigPromisesList: dynamicConfigPromisesList\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\nfunction warnOnBrowserContextMismatch() {\n  var mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    var details = mismatchedEnvMessages.map(function (message, index) {\n      return \"(\" + (index + 1) + \") \" + message;\n    }).join(' ');\n    var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\nfunction factory(app, installations) {\n  warnOnBrowserContextMismatch();\n  var appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" + (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\n      id: appId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName),\n      wrappedGtag = _a.wrappedGtag,\n      gtagCore = _a.gtagCore;\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);\n  var analyticsInstance = {\n    app: app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: function (eventName, eventParams, options) {\n      logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setCurrentScreen: function (screenName, options) {\n      setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserId: function (id, options) {\n      setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserProperties: function (properties, options) {\n      setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setAnalyticsCollectionEnabled: function (enabled) {\n      setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    INTERNAL: {\n      delete: function () {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n  return analyticsInstance;\n}\nvar name = \"@firebase/analytics\";\nvar version = \"0.6.18\";\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\nvar ANALYTICS_TYPE = 'analytics';\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\n    settings: settings,\n    EventName: EventName,\n    isSupported: isSupported\n  }));\n  instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\n  instance.registerVersion(name, version);\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics(firebase);\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\nfunction isSupported() {\n  return __awaiter(this, void 0, void 0, function () {\n    var isDBOpenable;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (isBrowserExtension()) {\n            return [2 /*return*/, false];\n          }\n          if (!areCookiesEnabled()) {\n            return [2 /*return*/, false];\n          }\n          if (!isIndexedDBAvailable()) {\n            return [2 /*return*/, false];\n          }\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, validateIndexedDBOpenable()];\n        case 2:\n          isDBOpenable = _a.sent();\n          return [2 /*return*/, isDBOpenable];\n        case 3:\n          _a.sent();\n          return [2 /*return*/, false];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };","map":{"version":3,"names":["__awaiter","__generator","__assign","firebase","Logger","ErrorFactory","calculateBackoffMillis","FirebaseError","validateIndexedDBOpenable","isIndexedDBAvailable","isBrowserExtension","areCookiesEnabled","Component","GA_FID_KEY","ORIGIN_KEY","FETCH_TIMEOUT_MILLIS","DYNAMIC_CONFIG_URL","GTAG_URL","GtagCommand","EventName","logEvent","gtagFunction","initializationPromise","eventName","eventParams","options","measurementId","params","_a","label","global","EVENT","sent","setCurrentScreen","screenName","SET","Promise","resolve","CONFIG","update","setUserId","id","setUserProperties","properties","flatProperties","_i","key","_b","Object","keys","length","setAnalyticsCollectionEnabled","enabled","window","logger","insertScriptTag","dataLayerName","script","document","createElement","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","gtagParams","correspondingAppId","dynamicConfigResults","foundConfig","e_1","trys","push","all","find","config","appId","error","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","_loop_1","gaSendToList_1","sendToId","state_1","e_2","values","wrapGtag","gtagWrapper","command","idOrNameOrParams","e_3","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","ERRORS","ERROR_FACTORY","LONG_RETRY_FACTOR","BASE_INTERVAL_MILLIS","RetryData","throttleMetadata","intervalMillis","prototype","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","defaultRetryData","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","request","appUrl","response","errorMessage","jsonResponse","method","headers","replace","fetch","status","json","message","create","httpStatus","responseMessage","fetchDynamicConfigWithRetry","app","retryData","timeoutMillis","signal","_this","backoffCount","throttleEndTimeMillis","Date","now","AnalyticsAbortSignal","setTimeout","abort","undefined","attemptFetchDynamicConfigWithRetry","backoffMillis","setAbortableTimeout","warn","isRetriableError","Number","customData","debug","reject","Math","max","timeout","addEventListener","clearTimeout","e","listeners","listener","forEach","validateIndexedDB","errorInfo","initializeIds","installations","dynamicConfigPromise","fidPromise","dynamicConfig","fid","configProperties","_c","then","catch","envIsValid","getId","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","resetGlobalVars","newGlobalInitDone","newInitializationPromisesMap","newDynamicPromises","getGlobalVars","settings","warnOnBrowserContextMismatch","mismatchedEnvMessages","details","map","index","join","err","factory","analyticsInstance","INTERNAL","delete","name","version","ANALYTICS_TYPE","registerAnalytics","instance","registerComponent","container","getProvider","getImmediate","setServiceProps","isSupported","internalFactory","registerVersion","analytics","reason","isDBOpenable"],"sources":["C:/Progect for learning/angular-blog/node_modules/@firebase/analytics/dist/index.esm.js"],"sourcesContent":["import { __awaiter, __generator, __assign } from 'tslib';\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, validateIndexedDBOpenable, isIndexedDBAvailable, isBrowserExtension, areCookiesEnabled } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Key to attach FID to in gtag params.\r\nvar GA_FID_KEY = 'firebase_id';\r\nvar ORIGIN_KEY = 'origin';\r\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\r\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\r\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\r\nvar GtagCommand;\r\n(function (GtagCommand) {\r\n    GtagCommand[\"EVENT\"] = \"event\";\r\n    GtagCommand[\"SET\"] = \"set\";\r\n    GtagCommand[\"CONFIG\"] = \"config\";\r\n})(GtagCommand || (GtagCommand = {}));\r\n/**\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n *\r\n * @public\r\n */\r\nvar EventName;\r\n(function (EventName) {\r\n    EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\r\n    EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\r\n    EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\r\n    EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\r\n    EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\r\n    /**\r\n     * @deprecated\r\n     * This event name is deprecated and is unsupported in updated\r\n     * Enhanced Ecommerce reports.\r\n     */\r\n    EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\r\n    EventName[\"EXCEPTION\"] = \"exception\";\r\n    EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\r\n    EventName[\"LOGIN\"] = \"login\";\r\n    EventName[\"PAGE_VIEW\"] = \"page_view\";\r\n    EventName[\"PURCHASE\"] = \"purchase\";\r\n    EventName[\"REFUND\"] = \"refund\";\r\n    EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\r\n    EventName[\"SCREEN_VIEW\"] = \"screen_view\";\r\n    EventName[\"SEARCH\"] = \"search\";\r\n    EventName[\"SELECT_CONTENT\"] = \"select_content\";\r\n    EventName[\"SELECT_ITEM\"] = \"select_item\";\r\n    EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\r\n    /** @deprecated */\r\n    EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\r\n    EventName[\"SHARE\"] = \"share\";\r\n    EventName[\"SIGN_UP\"] = \"sign_up\";\r\n    EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\r\n    EventName[\"VIEW_CART\"] = \"view_cart\";\r\n    EventName[\"VIEW_ITEM\"] = \"view_item\";\r\n    EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\r\n    EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\r\n    EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\r\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nfunction logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var measurementId, params;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\r\n                    return [2 /*return*/];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    params = __assign(__assign({}, eventParams), { 'send_to': measurementId });\r\n                    gtagFunction(GtagCommand.EVENT, eventName, params);\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\r\nfunction setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'screen_name': screenName\r\n                    });\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\r\nfunction setUserId(gtagFunction, initializationPromise, id, options) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.SET, { 'user_id': id });\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'user_id': id\r\n                    });\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\r\nfunction setUserProperties(gtagFunction, initializationPromise, properties, options) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var flatProperties, _i, _a, key, measurementId;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    flatProperties = {};\r\n                    for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\r\n                        key = _a[_i];\r\n                        // use dot notation for merge behavior in gtag.js\r\n                        flatProperties[\"user_properties.\" + key] = properties[key];\r\n                    }\r\n                    gtagFunction(GtagCommand.SET, flatProperties);\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _b.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'user_properties': properties\r\n                    });\r\n                    _b.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\r\nfunction setAnalyticsCollectionEnabled(initializationPromise, enabled) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, initializationPromise];\r\n                case 1:\r\n                    measurementId = _a.sent();\r\n                    window[\"ga-disable-\" + measurementId] = !enabled;\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction insertScriptTag(dataLayerName, measurementId) {\r\n    var script = document.createElement('script');\r\n    script.src = GTAG_URL + \"?l=\" + dataLayerName + \"&id=\" + measurementId;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    var dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\r\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    correspondingAppId = measurementIdToAppId[measurementId];\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 7, , 8]);\r\n                    if (!correspondingAppId) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 3: return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\r\n                case 4:\r\n                    dynamicConfigResults = _a.sent();\r\n                    foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === measurementId; });\r\n                    if (!foundConfig) return [3 /*break*/, 6];\r\n                    return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];\r\n                case 5:\r\n                    _a.sent();\r\n                    _a.label = 6;\r\n                case 6: return [3 /*break*/, 8];\r\n                case 7:\r\n                    e_1 = _a.sent();\r\n                    logger.error(e_1);\r\n                    return [3 /*break*/, 8];\r\n                case 8:\r\n                    gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\r\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    _a.trys.push([0, 4, , 5]);\r\n                    initializationPromisesToWaitFor = [];\r\n                    if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];\r\n                    gaSendToList = gtagParams['send_to'];\r\n                    // Make it an array if is isn't, so it can be dealt with the same way.\r\n                    if (!Array.isArray(gaSendToList)) {\r\n                        gaSendToList = [gaSendToList];\r\n                    }\r\n                    return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\r\n                case 1:\r\n                    dynamicConfigResults = _a.sent();\r\n                    _loop_1 = function (sendToId) {\r\n                        // Any fetched dynamic measurement ID that matches this 'send_to' ID\r\n                        var foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === sendToId; });\r\n                        var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\r\n                        if (initializationPromise) {\r\n                            initializationPromisesToWaitFor.push(initializationPromise);\r\n                        }\r\n                        else {\r\n                            // Found an item in 'send_to' that is not associated\r\n                            // directly with an FID, possibly a group.  Empty this array,\r\n                            // exit the loop early, and let it get populated below.\r\n                            initializationPromisesToWaitFor = [];\r\n                            return \"break\";\r\n                        }\r\n                    };\r\n                    for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\r\n                        sendToId = gaSendToList_1[_i];\r\n                        state_1 = _loop_1(sendToId);\r\n                        if (state_1 === \"break\")\r\n                            break;\r\n                    }\r\n                    _a.label = 2;\r\n                case 2:\r\n                    // This will be unpopulated if there was no 'send_to' field , or\r\n                    // if not all entries in the 'send_to' field could be mapped to\r\n                    // a FID. In these cases, wait on all pending initialization promises.\r\n                    if (initializationPromisesToWaitFor.length === 0) {\r\n                        initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\r\n                    }\r\n                    // Run core gtag function with args after all relevant initialization\r\n                    // promises have been resolved.\r\n                    return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];\r\n                case 3:\r\n                    // Run core gtag function with args after all relevant initialization\r\n                    // promises have been resolved.\r\n                    _a.sent();\r\n                    // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n                    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    e_2 = _a.sent();\r\n                    logger.error(e_2);\r\n                    return [3 /*break*/, 5];\r\n                case 5: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\r\nfunction wrapGtag(gtagCore, \r\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\r\ninitializationPromisesMap, \r\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\r\ndynamicConfigPromisesList, \r\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\r\nmeasurementIdToAppId) {\r\n    /**\r\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n     * @param command Gtag command type.\r\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n     * @param gtagParams Params if event is EVENT/CONFIG.\r\n     */\r\n    function gtagWrapper(command, idOrNameOrParams, gtagParams) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_3;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 6, , 7]);\r\n                        if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];\r\n                        // If EVENT, second arg must be measurementId.\r\n                        return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\r\n                    case 1:\r\n                        // If EVENT, second arg must be measurementId.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 2:\r\n                        if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];\r\n                        // If CONFIG, second arg must be measurementId.\r\n                        return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\r\n                    case 3:\r\n                        // If CONFIG, second arg must be measurementId.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        // If SET, second arg must be params.\r\n                        gtagCore(GtagCommand.SET, idOrNameOrParams);\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        e_3 = _a.sent();\r\n                        logger.error(e_3);\r\n                        return [3 /*break*/, 7];\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return gtagWrapper;\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\r\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    var gtagCore = function () {\r\n        var _args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            _args[_i] = arguments[_i];\r\n        }\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\r\n    return {\r\n        gtagCore: gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\r\nfunction findGtagScriptOnPage() {\r\n    var scriptTags = window.document.getElementsByTagName('script');\r\n    for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\r\n        var tag = _a[_i];\r\n        if (tag.src && tag.src.includes(GTAG_URL)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a;\r\nvar ERRORS = (_a = {},\r\n    _a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each appId.',\r\n    _a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    _a[\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\r\n    _a[\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    _a[\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    _a[\"fetch-throttle\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    _a[\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\r\n    _a[\"no-api-key\" /* NO_API_KEY */] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid API key.',\r\n    _a[\"no-app-id\" /* NO_APP_ID */] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid app ID.',\r\n    _a);\r\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\r\nvar LONG_RETRY_FACTOR = 30;\r\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\r\nvar BASE_INTERVAL_MILLIS = 1000;\r\n/**\r\n * Stubbable retry data storage class.\r\n */\r\nvar RetryData = /** @class */ (function () {\r\n    function RetryData(throttleMetadata, intervalMillis) {\r\n        if (throttleMetadata === void 0) { throttleMetadata = {}; }\r\n        if (intervalMillis === void 0) { intervalMillis = BASE_INTERVAL_MILLIS; }\r\n        this.throttleMetadata = throttleMetadata;\r\n        this.intervalMillis = intervalMillis;\r\n    }\r\n    RetryData.prototype.getThrottleMetadata = function (appId) {\r\n        return this.throttleMetadata[appId];\r\n    };\r\n    RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\r\n        this.throttleMetadata[appId] = metadata;\r\n    };\r\n    RetryData.prototype.deleteThrottleMetadata = function (appId) {\r\n        delete this.throttleMetadata[appId];\r\n    };\r\n    return RetryData;\r\n}());\r\nvar defaultRetryData = new RetryData();\r\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\r\nfunction getHeaders(apiKey) {\r\n    return new Headers({\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nfunction fetchDynamicConfig(appFields) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    appId = appFields.appId, apiKey = appFields.apiKey;\r\n                    request = {\r\n                        method: 'GET',\r\n                        headers: getHeaders(apiKey)\r\n                    };\r\n                    appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\r\n                    return [4 /*yield*/, fetch(appUrl, request)];\r\n                case 1:\r\n                    response = _b.sent();\r\n                    if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];\r\n                    errorMessage = '';\r\n                    _b.label = 2;\r\n                case 2:\r\n                    _b.trys.push([2, 4, , 5]);\r\n                    return [4 /*yield*/, response.json()];\r\n                case 3:\r\n                    jsonResponse = (_b.sent());\r\n                    if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\r\n                        errorMessage = jsonResponse.error.message;\r\n                    }\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    _b.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 5: throw ERROR_FACTORY.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\r\n                    httpStatus: response.status,\r\n                    responseMessage: errorMessage\r\n                });\r\n                case 6: return [2 /*return*/, response.json()];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nfunction fetchDynamicConfigWithRetry(app, \r\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\r\nretryData, timeoutMillis) {\r\n    if (retryData === void 0) { retryData = defaultRetryData; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _a, appId, apiKey, measurementId, throttleMetadata, signal;\r\n        var _this = this;\r\n        return __generator(this, function (_b) {\r\n            _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\r\n            if (!appId) {\r\n                throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\r\n            }\r\n            if (!apiKey) {\r\n                if (measurementId) {\r\n                    return [2 /*return*/, {\r\n                            measurementId: measurementId,\r\n                            appId: appId\r\n                        }];\r\n                }\r\n                throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\r\n            }\r\n            throttleMetadata = retryData.getThrottleMetadata(appId) || {\r\n                backoffCount: 0,\r\n                throttleEndTimeMillis: Date.now()\r\n            };\r\n            signal = new AnalyticsAbortSignal();\r\n            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n                    signal.abort();\r\n                    return [2 /*return*/];\r\n                });\r\n            }); }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\r\n            return [2 /*return*/, attemptFetchDynamicConfigWithRetry({ appId: appId, apiKey: apiKey, measurementId: measurementId }, throttleMetadata, signal, retryData)];\r\n        });\r\n    });\r\n}\r\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\r\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\r\n) {\r\n    var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;\r\n    if (retryData === void 0) { retryData = defaultRetryData; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    appId = appFields.appId, measurementId = appFields.measurementId;\r\n                    _b.label = 1;\r\n                case 1:\r\n                    _b.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];\r\n                case 2:\r\n                    _b.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _b.sent();\r\n                    if (measurementId) {\r\n                        logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" +\r\n                            (\" Falling back to the measurement ID \" + measurementId) +\r\n                            (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\r\n                        return [2 /*return*/, { appId: appId, measurementId: measurementId }];\r\n                    }\r\n                    throw e_1;\r\n                case 4:\r\n                    _b.trys.push([4, 6, , 7]);\r\n                    return [4 /*yield*/, fetchDynamicConfig(appFields)];\r\n                case 5:\r\n                    response = _b.sent();\r\n                    // Note the SDK only clears throttle state if response is success or non-retriable.\r\n                    retryData.deleteThrottleMetadata(appId);\r\n                    return [2 /*return*/, response];\r\n                case 6:\r\n                    e_2 = _b.sent();\r\n                    if (!isRetriableError(e_2)) {\r\n                        retryData.deleteThrottleMetadata(appId);\r\n                        if (measurementId) {\r\n                            logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" +\r\n                                (\" Falling back to the measurement ID \" + measurementId) +\r\n                                (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\r\n                            return [2 /*return*/, { appId: appId, measurementId: measurementId }];\r\n                        }\r\n                        else {\r\n                            throw e_2;\r\n                        }\r\n                    }\r\n                    backoffMillis = Number(e_2.customData.httpStatus) === 503\r\n                        ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\r\n                        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\r\n                    throttleMetadata = {\r\n                        throttleEndTimeMillis: Date.now() + backoffMillis,\r\n                        backoffCount: backoffCount + 1\r\n                    };\r\n                    // Persists state.\r\n                    retryData.setThrottleMetadata(appId, throttleMetadata);\r\n                    logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\r\n                    return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise(function (resolve, reject) {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        var timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(function () {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis: throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    var httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nvar AnalyticsAbortSignal = /** @class */ (function () {\r\n    function AnalyticsAbortSignal() {\r\n        this.listeners = [];\r\n    }\r\n    AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    AnalyticsAbortSignal.prototype.abort = function () {\r\n        this.listeners.forEach(function (listener) { return listener(); });\r\n    };\r\n    return AnalyticsAbortSignal;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateIndexedDB() {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var e_1;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!!isIndexedDBAvailable()) return [3 /*break*/, 1];\r\n                    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                        errorInfo: 'IndexedDB is not available in this environment.'\r\n                    }).message);\r\n                    return [2 /*return*/, false];\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, validateIndexedDBOpenable()];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _a.sent();\r\n                    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                        errorInfo: e_1\r\n                    }).message);\r\n                    return [2 /*return*/, false];\r\n                case 4: return [2 /*return*/, true];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\r\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\r\n        var _b;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\r\n                    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\r\n                    dynamicConfigPromise\r\n                        .then(function (config) {\r\n                        measurementIdToAppId[config.measurementId] = config.appId;\r\n                        if (app.options.measurementId &&\r\n                            config.measurementId !== app.options.measurementId) {\r\n                            logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" +\r\n                                (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") +\r\n                                \" To ensure analytics events are always sent to the correct Analytics property,\" +\r\n                                \" update the\" +\r\n                                \" measurement ID field in the local config or remove it from the local config.\");\r\n                        }\r\n                    })\r\n                        .catch(function (e) { return logger.error(e); });\r\n                    // Add to list to track state of all dynamic config promises.\r\n                    dynamicConfigPromisesList.push(dynamicConfigPromise);\r\n                    fidPromise = validateIndexedDB().then(function (envIsValid) {\r\n                        if (envIsValid) {\r\n                            return installations.getId();\r\n                        }\r\n                        else {\r\n                            return undefined;\r\n                        }\r\n                    });\r\n                    return [4 /*yield*/, Promise.all([\r\n                            dynamicConfigPromise,\r\n                            fidPromise\r\n                        ])];\r\n                case 1:\r\n                    _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];\r\n                    // Detect if user has already put the gtag <script> tag on this page.\r\n                    if (!findGtagScriptOnPage()) {\r\n                        insertScriptTag(dataLayerName, dynamicConfig.measurementId);\r\n                    }\r\n                    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n                    // but since it is idempotent, we can call it multiple times.\r\n                    // We keep it together with other initialization logic for better code structure.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    gtagCore('js', new Date());\r\n                    configProperties = (_b = {},\r\n                        // guard against developers accidentally setting properties with prefix `firebase_`\r\n                        _b[ORIGIN_KEY] = 'firebase',\r\n                        _b.update = true,\r\n                        _b);\r\n                    if (fid != null) {\r\n                        configProperties[GA_FID_KEY] = fid;\r\n                    }\r\n                    // It should be the first config command called on this GA-ID\r\n                    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n                    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\r\n                    // `configProperties`.\r\n                    gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\r\n                    return [2 /*return*/, dynamicConfig.measurementId];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\r\nvar initializationPromisesMap = {};\r\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\r\nvar dynamicConfigPromisesList = [];\r\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\r\nvar measurementIdToAppId = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nvar dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nvar gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nvar gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nvar wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nvar globalInitDone = false;\r\n/**\r\n * For testing\r\n */\r\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\r\n    if (newGlobalInitDone === void 0) { newGlobalInitDone = false; }\r\n    if (newInitializationPromisesMap === void 0) { newInitializationPromisesMap = {}; }\r\n    if (newDynamicPromises === void 0) { newDynamicPromises = []; }\r\n    globalInitDone = newGlobalInitDone;\r\n    initializationPromisesMap = newInitializationPromisesMap;\r\n    dynamicConfigPromisesList = newDynamicPromises;\r\n    dataLayerName = 'dataLayer';\r\n    gtagName = 'gtag';\r\n}\r\n/**\r\n * For testing\r\n */\r\nfunction getGlobalVars() {\r\n    return {\r\n        initializationPromisesMap: initializationPromisesMap,\r\n        dynamicConfigPromisesList: dynamicConfigPromisesList\r\n    };\r\n}\r\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\r\nfunction settings(options) {\r\n    if (globalInitDone) {\r\n        throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\r\n    }\r\n    if (options.dataLayerName) {\r\n        dataLayerName = options.dataLayerName;\r\n    }\r\n    if (options.gtagName) {\r\n        gtagName = options.gtagName;\r\n    }\r\n}\r\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\r\nfunction warnOnBrowserContextMismatch() {\r\n    var mismatchedEnvMessages = [];\r\n    if (isBrowserExtension()) {\r\n        mismatchedEnvMessages.push('This is a browser extension environment.');\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        mismatchedEnvMessages.push('Cookies are not available.');\r\n    }\r\n    if (mismatchedEnvMessages.length > 0) {\r\n        var details = mismatchedEnvMessages\r\n            .map(function (message, index) { return \"(\" + (index + 1) + \") \" + message; })\r\n            .join(' ');\r\n        var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\r\n            errorInfo: details\r\n        });\r\n        logger.warn(err.message);\r\n    }\r\n}\r\nfunction factory(app, installations) {\r\n    warnOnBrowserContextMismatch();\r\n    var appId = app.options.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\r\n    }\r\n    if (!app.options.apiKey) {\r\n        if (app.options.measurementId) {\r\n            logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" +\r\n                (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) +\r\n                \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\r\n        }\r\n    }\r\n    if (initializationPromisesMap[appId] != null) {\r\n        throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\r\n            id: appId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        getOrCreateDataLayer(dataLayerName);\r\n        var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    // This map reflects the completion state of all promises for each appId.\r\n    initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);\r\n    var analyticsInstance = {\r\n        app: app,\r\n        // Public methods return void for API simplicity and to better match gtag,\r\n        // while internal implementations return promises.\r\n        logEvent: function (eventName, eventParams, options) {\r\n            logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setCurrentScreen: function (screenName, options) {\r\n            setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setUserId: function (id, options) {\r\n            setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setUserProperties: function (properties, options) {\r\n            setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setAnalyticsCollectionEnabled: function (enabled) {\r\n            setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) { return logger.error(e); });\r\n        },\r\n        INTERNAL: {\r\n            delete: function () {\r\n                delete initializationPromisesMap[appId];\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n    };\r\n    return analyticsInstance;\r\n}\n\nvar name = \"@firebase/analytics\";\nvar version = \"0.6.18\";\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nvar ANALYTICS_TYPE = 'analytics';\r\nfunction registerAnalytics(instance) {\r\n    instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        var installations = container\r\n            .getProvider('installations')\r\n            .getImmediate();\r\n        return factory(app, installations);\r\n    }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\r\n        settings: settings,\r\n        EventName: EventName,\r\n        isSupported: isSupported\r\n    }));\r\n    instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n    instance.registerVersion(name, version);\r\n    function internalFactory(container) {\r\n        try {\r\n            var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\r\n            return {\r\n                logEvent: analytics.logEvent\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\r\n                reason: e\r\n            });\r\n        }\r\n    }\r\n}\r\nregisterAnalytics(firebase);\r\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\r\nfunction isSupported() {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var isDBOpenable;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (isBrowserExtension()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    if (!areCookiesEnabled()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    if (!isIndexedDBAvailable()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, validateIndexedDBOpenable()];\r\n                case 2:\r\n                    isDBOpenable = _a.sent();\r\n                    return [2 /*return*/, isDBOpenable];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [2 /*return*/, false];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\n\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}