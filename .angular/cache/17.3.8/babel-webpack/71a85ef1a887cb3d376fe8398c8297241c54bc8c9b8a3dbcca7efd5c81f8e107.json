{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from \"../../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class PostService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n  }\n  create(post) {\n    let params = new HttpParams();\n    params = params.append('auth', this.authService.token);\n    return this.http.post(`${environment.fbDbUrl}/posts.json`, post, {\n      params\n    }).pipe(map(response => {\n      return {\n        ...post,\n        id: response.name,\n        date: new Date(post.date)\n      };\n    }));\n  }\n  getPostId(id) {\n    return this.http.get(`${environment.fbDbUrl}/posts/${id}.json`).pipe(map(post => {\n      return {\n        ...post,\n        id,\n        date: new Date()\n      };\n    }));\n  }\n  getAllPosts() {\n    return this.http.get(`${environment.fbDbUrl}/posts.json`).pipe(map(response => {\n      return Object.keys(response).map(key => ({\n        ...response[key],\n        id: key,\n        date: new Date(response[key].date)\n      }));\n    }));\n  }\n  updatePost(post) {\n    let params = new HttpParams();\n    params = params.append('auth', this.authService.token);\n    return this.http.patch(`${environment.fbDbUrl}/posts/${post.id}.json`, post, {\n      params\n    });\n  }\n  remove(id) {\n    let params = new HttpParams();\n    params = params.append('auth', this.authService.token);\n    return this.http.delete(`${environment.fbDbUrl}/posts/${id}.json`, {\n      params\n    });\n  }\n  static #_ = this.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["HttpParams","map","environment","PostService","constructor","http","authService","create","post","params","append","token","fbDbUrl","pipe","response","id","name","date","Date","getPostId","get","getAllPosts","Object","keys","key","updatePost","patch","remove","delete","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Progect for learning\\angular-blog\\src\\app\\admin\\shared\\services\\post.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\";\r\n\r\nimport {PostInterface} from \"../interfaces/post.interface\";\r\nimport {environment} from \"../../../../environments/environment\";\r\nimport {AuthService} from \"./auth.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class PostService {\r\n  constructor(private http: HttpClient, private authService: AuthService) {\r\n  }\r\n\r\n  create(post: PostInterface): Observable<PostInterface> {\r\n    let params = new HttpParams();\r\n\r\n    params = params.append('auth', this.authService.token);\r\n\r\n    return this.http.post<PostInterface>(`${environment.fbDbUrl}/posts.json`, post, {\r\n      params\r\n    })\r\n      .pipe(\r\n        map((response: PostInterface | any) => {\r\n            return {\r\n              ...post,\r\n              id: response.name,\r\n              date: new Date(post.date),\r\n            }\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  getPostId(id: string | any): Observable<PostInterface> {\r\n    return this.http.get<PostInterface>(`${environment.fbDbUrl}/posts/${id}.json`)\r\n      .pipe(\r\n        map((post: PostInterface) => {\r\n            return {\r\n              ...post,\r\n              id,\r\n              date: new Date(),\r\n            }\r\n          }\r\n        )\r\n      )\r\n  }\r\n\r\n  getAllPosts(): Observable<PostInterface[]> {\r\n    return this.http.get(`${environment.fbDbUrl}/posts.json`)\r\n      .pipe(\r\n        map((response: {[key: string]: any }) => {\r\n            return Object\r\n              .keys(response)\r\n              .map(key => ({\r\n                    ...response[key],\r\n                    id: key,\r\n                    date: new Date(response[key].date)\r\n                  }\r\n                )\r\n              )\r\n          }\r\n        )\r\n      )\r\n  }\r\n\r\n  updatePost(post: PostInterface): Observable<PostInterface> {\r\n    let params = new HttpParams();\r\n\r\n    params = params.append('auth', this.authService.token);\r\n    return this.http.patch<PostInterface>(`${environment.fbDbUrl}/posts/${post.id}.json`, post, {\r\n      params\r\n    });\r\n  }\r\n\r\n  remove(id: string | undefined): Observable<void> {\r\n    let params = new HttpParams();\r\n\r\n    params = params.append('auth', this.authService.token);\r\n    return this.http.delete<void>(`${environment.fbDbUrl}/posts/${id}.json`, {\r\n        params\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAoBA,UAAU,QAAO,sBAAsB;AAE3D,SAAQC,GAAG,QAAO,gBAAgB;AAGlC,SAAQC,WAAW,QAAO,sCAAsC;;;;AAMhE,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;EACzD;EAEAC,MAAMA,CAACC,IAAmB;IACxB,IAAIC,MAAM,GAAG,IAAIT,UAAU,EAAE;IAE7BS,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAE,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;IAEtD,OAAO,IAAI,CAACN,IAAI,CAACG,IAAI,CAAgB,GAAGN,WAAW,CAACU,OAAO,aAAa,EAAEJ,IAAI,EAAE;MAC9EC;KACD,CAAC,CACCI,IAAI,CACHZ,GAAG,CAAEa,QAA6B,IAAI;MAClC,OAAO;QACL,GAAGN,IAAI;QACPO,EAAE,EAAED,QAAQ,CAACE,IAAI;QACjBC,IAAI,EAAE,IAAIC,IAAI,CAACV,IAAI,CAACS,IAAI;OACzB;IACH,CAAC,CACF,CACF;EACL;EAEAE,SAASA,CAACJ,EAAgB;IACxB,OAAO,IAAI,CAACV,IAAI,CAACe,GAAG,CAAgB,GAAGlB,WAAW,CAACU,OAAO,UAAUG,EAAE,OAAO,CAAC,CAC3EF,IAAI,CACHZ,GAAG,CAAEO,IAAmB,IAAI;MACxB,OAAO;QACL,GAAGA,IAAI;QACPO,EAAE;QACFE,IAAI,EAAE,IAAIC,IAAI;OACf;IACH,CAAC,CACF,CACF;EACL;EAEAG,WAAWA,CAAA;IACT,OAAO,IAAI,CAAChB,IAAI,CAACe,GAAG,CAAC,GAAGlB,WAAW,CAACU,OAAO,aAAa,CAAC,CACtDC,IAAI,CACHZ,GAAG,CAAEa,QAA+B,IAAI;MACpC,OAAOQ,MAAM,CACVC,IAAI,CAACT,QAAQ,CAAC,CACdb,GAAG,CAACuB,GAAG,KAAK;QACP,GAAGV,QAAQ,CAACU,GAAG,CAAC;QAChBT,EAAE,EAAES,GAAG;QACPP,IAAI,EAAE,IAAIC,IAAI,CAACJ,QAAQ,CAACU,GAAG,CAAC,CAACP,IAAI;OAClC,CACF,CACF;IACL,CAAC,CACF,CACF;EACL;EAEAQ,UAAUA,CAACjB,IAAmB;IAC5B,IAAIC,MAAM,GAAG,IAAIT,UAAU,EAAE;IAE7BS,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAE,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;IACtD,OAAO,IAAI,CAACN,IAAI,CAACqB,KAAK,CAAgB,GAAGxB,WAAW,CAACU,OAAO,UAAUJ,IAAI,CAACO,EAAE,OAAO,EAAEP,IAAI,EAAE;MAC1FC;KACD,CAAC;EACJ;EAEAkB,MAAMA,CAACZ,EAAsB;IAC3B,IAAIN,MAAM,GAAG,IAAIT,UAAU,EAAE;IAE7BS,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAE,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;IACtD,OAAO,IAAI,CAACN,IAAI,CAACuB,MAAM,CAAO,GAAG1B,WAAW,CAACU,OAAO,UAAUG,EAAE,OAAO,EAAE;MACrEN;KACH,CAAC;EACJ;EAAC,QAAAoB,CAAA,G;qBAxEU1B,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXjC,WAAW;IAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}