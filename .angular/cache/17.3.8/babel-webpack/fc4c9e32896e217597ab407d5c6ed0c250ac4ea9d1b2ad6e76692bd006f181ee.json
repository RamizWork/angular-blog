{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from \"../../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class PostService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n  }\n  create(post) {\n    let params = new HttpParams();\n    params = params.append('auth', this.authService.token);\n    return this.http.post(`${environment.fbDbUrl}/posts.json`, post, {\n      params\n    }).pipe(map(response => {\n      return Object.assign(Object.assign({}, post), {\n        id: response.name,\n        date: new Date(post.date)\n      });\n    }));\n  }\n  getPostId(id) {\n    return this.http.get(`${environment.fbDbUrl}/posts/${id}.json`).pipe(map(post => {\n      return Object.assign(Object.assign({}, post), {\n        id,\n        date: new Date()\n      });\n    }));\n  }\n  getAllPosts() {\n    return this.http.get(`${environment.fbDbUrl}/posts.json`).pipe(map(response => {\n      return Object.keys(response).map(key => Object.assign(Object.assign({}, response[key]), {\n        id: key,\n        date: new Date(response[key].date)\n      }));\n    }));\n  }\n  updatePost(post) {\n    let params = new HttpParams();\n    params = params.append('auth', this.authService.token);\n    return this.http.patch(`${environment.fbDbUrl}/posts/${post.id}.json`, post, {\n      params\n    });\n  }\n  remove(id) {\n    let params = new HttpParams();\n    params = params.append('auth', this.authService.token);\n    return this.http.delete(`${environment.fbDbUrl}/posts/${id}.json`, {\n      params\n    });\n  }\n}\nPostService.ɵfac = function PostService_Factory(t) {\n  return new (t || PostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nPostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostService,\n  factory: PostService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"names":["HttpParams","map","environment","PostService","constructor","http","authService","create","post","params","append","token","fbDbUrl","pipe","response","Object","assign","id","name","date","Date","getPostId","get","getAllPosts","keys","key","updatePost","patch","remove","delete","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Progect for learning\\angular-blog\\src\\app\\admin\\shared\\services\\post.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\";\r\n\r\nimport {PostInterface} from \"../interfaces/post.interface\";\r\nimport {environment} from \"../../../../environments/environment\";\r\nimport {AuthService} from \"./auth.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class PostService {\r\n  constructor(private http: HttpClient, private authService: AuthService) {\r\n  }\r\n\r\n  create(post: PostInterface): Observable<PostInterface> {\r\n    let params = new HttpParams();\r\n\r\n    params = params.append('auth', this.authService.token);\r\n\r\n    return this.http.post<PostInterface>(`${environment.fbDbUrl}/posts.json`, post, {\r\n      params\r\n    })\r\n      .pipe(\r\n        map((response: PostInterface | any) => {\r\n            return {\r\n              ...post,\r\n              id: response.name,\r\n              date: new Date(post.date),\r\n            }\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  getPostId(id: string | any): Observable<PostInterface> {\r\n    return this.http.get<PostInterface>(`${environment.fbDbUrl}/posts/${id}.json`)\r\n      .pipe(\r\n        map((post: PostInterface) => {\r\n            return {\r\n              ...post,\r\n              id,\r\n              date: new Date(),\r\n            }\r\n          }\r\n        )\r\n      )\r\n  }\r\n\r\n  getAllPosts(): Observable<PostInterface[]> {\r\n    return this.http.get(`${environment.fbDbUrl}/posts.json`)\r\n      .pipe(\r\n        map((response: {[key: string]: any }) => {\r\n            return Object\r\n              .keys(response)\r\n              .map(key => ({\r\n                    ...response[key],\r\n                    id: key,\r\n                    date: new Date(response[key].date)\r\n                  }\r\n                )\r\n              )\r\n          }\r\n        )\r\n      )\r\n  }\r\n\r\n  updatePost(post: PostInterface): Observable<PostInterface> {\r\n    let params = new HttpParams();\r\n\r\n    params = params.append('auth', this.authService.token);\r\n    return this.http.patch<PostInterface>(`${environment.fbDbUrl}/posts/${post.id}.json`, post, {\r\n      params\r\n    });\r\n  }\r\n\r\n  remove(id: string | undefined): Observable<void> {\r\n    let params = new HttpParams();\r\n\r\n    params = params.append('auth', this.authService.token);\r\n    return this.http.delete<void>(`${environment.fbDbUrl}/posts/${id}.json`, {\r\n        params\r\n    })\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}